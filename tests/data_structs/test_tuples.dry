class TestTuple {
    def test_init() {
        let empty = ();
        assert_equals("Empty tuple string representation", str(empty), "()");
        assert_equals("An empty tuple is a unit", typeof(empty), "unit");

        let singleton = (1,);
        assert_equals("Singleton tuple string representation", str(singleton), "(1,)");
        assert_equals("Singleton tuple type", typeof(singleton), "tuple");
        assert_equals("Singleton tuple size", singleton.size(), 1);

        let many = (1, "two", none);
        assert_equals("Multiple-element string representation", str(many), "(1, two, none)");
        assert_equals("Multiple-element tuple type", typeof(many), "tuple");
        assert_equals("Multiple-element tuple size", many.size(), 3);
    }

    def test_get() {
        let singleton = (1,);
        assert_error("Reading tuple elements with string index", Errors.INVALID_INDEX, lambda() {
            singleton[""];
        });
        assert_error("Reading tuple elements with index < 0", Errors.INDEX_OUT_OF_BOUNDS, lambda() {
            singleton[-1];
        });
        assert_error("Reading tuple elements with index == size", Errors.INDEX_OUT_OF_BOUNDS, lambda() {
            singleton[1];
        });
        assert_error("Reading tuple elements with index > size", Errors.INDEX_OUT_OF_BOUNDS, lambda() {
            singleton[2];
        });

        let many = (1, "two", none);
        assert_equals("Reading tuple elements correctly", "two", many[1]);
    }
}

let test_tuple = TestTuple();
test_tuple.test_init();
test_tuple.test_get();