class TestList {
    def test_str() {
        let xs = [1, "two", 3];
        assert_equals("Stringify lists", str(xs), "[1, two, 3]");
        assert_equals("Empty list string representation", str([]), "[]");
    }

    def test_get() {
        let xs = [1, "two", 3];

        assert_equals("First element", xs[0], 1);
        assert_equals("Second element", xs[1], "two");
        assert_equals("Third element", xs[2], 3);

        let empty = [];
        assert_error("Reading list elements with string index", Errors.INVALID_INDEX, lambda() {
            empty[""];
        });
        assert_error("Reading list elements with index < 0", Errors.INDEX_OUT_OF_BOUNDS, lambda() {
            empty[-1];
        });

        assert_error("Reading list elements with index == size", Errors.INDEX_OUT_OF_BOUNDS, lambda() {
            xs[3];
        });
        assert_error("Reading list elements with index > size", Errors.INDEX_OUT_OF_BOUNDS, lambda() {
            xs[4];
        });
    }

    def test_size() {
        let xs = [1, 2, 3, 4, 5];
        assert_equals("Non-empty list size", xs.size(), 5);
        assert_equals("Empty list size", [].size(), 0);
    }

    def test_add_method() {
        let xs = ["one"];
        assert_equals("New element is added to the list", str(xs.add("two")), "[one, two]");
        assert_equals("Size should increase after adding new item", xs.size(), 2);
    }

    def test_type() {
        assert_equals("List type", typeof([1, 2]), "list");
    }
}

let test_list = TestList();
test_list.test_str();
test_list.test_get();
test_list.test_size();
test_list.test_type();
test_list.test_add_method();