class TestList {
    def test_str() {
        let xs = [1, "two", 3];
        assert_equals("Stringify lists", "[1, two, 3]", str(xs));
        assert_equals("Stringify empty lists", "[]", str([]));
    }

    def test_get() {
        let xs = [1, "two", 3];

        assert_equals("First element", 1, xs[0]);
        assert_equals("Second element", "two", xs[1]);
        assert_equals("Third element", 3, xs[2]);

        let empty = [];
        assert_error("Reading list elements with string index", Errors.INVALID_INDEX, lambda() {
            empty[""];
        });
        assert_error("Reading list elements with index < 0", Errors.INDEX_OUT_OF_BOUNDS, lambda() {
            empty[-1];
        });

        assert_error("Reading list elements with index == size", Errors.INDEX_OUT_OF_BOUNDS, lambda() {
            xs[3];
        });
        assert_error("Reading list elements with index > size", Errors.INDEX_OUT_OF_BOUNDS, lambda() {
            xs[4];
        });
    }

    def test_set() {
        let xs = [1, "two", 3];

        assert_error("Updating list with string index", Errors.INVALID_INDEX, lambda() {
            xs[""] = 20;
        });
        assert_error("Updating list with index < 0", Errors.INDEX_OUT_OF_BOUNDS, lambda() {
            xs[-1] = 0;
        });

        assert_error("Updating list with index == size", Errors.INDEX_OUT_OF_BOUNDS, lambda() {
            xs[3] = 19;
        });
        assert_error("Updating list with index > size", Errors.INDEX_OUT_OF_BOUNDS, lambda() {
            xs[4] = 1;
        });

        xs[0] = 10;
        xs[1] = 2;
        assert_equals("Updating list successfully", [10, 2, 3], xs);
    }

    def test_delete() {
        let xs = ["apple", "banana", "orange"];
        assert_error("Deleting a list element with string index", Errors.INVALID_INDEX, lambda() {
            del xs[""];
        });
        assert_error("Deleting a list element with index < 0", Errors.INDEX_OUT_OF_BOUNDS, lambda() {
            del xs[-1];
        });

        assert_error("Deleting a list element with index == size", Errors.INDEX_OUT_OF_BOUNDS, lambda() {
            del xs[3];
        });
        assert_error("Deleting a list element with index > size", Errors.INDEX_OUT_OF_BOUNDS, lambda() {
            del xs[4];
        });
        del xs[1];
        assert_equals("Deleting a list element successfully", ["apple", "orange"], xs);
    }

    def test_size() {
        let xs = [1, 2, 3, 4, 5];
        assert_equals("Non-empty list size", 5, xs.size());
        assert_equals("Empty list size", 0, [].size());
    }

    def test_add_method() {
        let xs = ["one"];
        assert_equals("New element is added to the list", ["one", "two"], xs.add("two"));
        assert_equals("Size should increase after adding new item", 2, xs.size());
    }

    def test_type() {
        assert_equals("List type", "list", typeof([1, 2]));
    }
}

let lists = TestList();
lists.test_str();
lists.test_get();
lists.test_size();
lists.test_type();
lists.test_add_method();
lists.test_set();
lists.test_delete();