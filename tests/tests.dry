// Note: This is an auto-generated script


// ========== test_scopes.dry ========== 
// Based on the examples from "Crafting Interpreters"
def test_scopes() {
    let a = "global a";
    let b = "global b";
    let c = "global c";
    {
        let a = "outer a";
        let b = "outer b";
        {
            let a = "inner a";
            assert("inner 'a' should overshadow outer 'a'", a, "inner a");
            assert("access outer 'b'", b, "outer b");
            assert("access outer 'c'", c, "global c");
        }
        assert("outer 'a' should overshadow global 'a'", a, "outer a");
        assert("outer 'b' should overshadow global 'b'", b, "outer b");
        assert("access global 'c'", c, "global c");
    }
    assert("access global 'a'", a, "global a");
    assert("access global 'b'", b, "global b");
    assert("access global 'c'", c, "global c");
    {
        a = "modified global a";
    }
    assert("global 'a' should be modifiable from inner scope", a, "modified global a");
}

test_scopes();

// ========== test_init.dry ========== 
def test_init() {
    class Foo {
       def init() {
         self.message = "hello";
       }
    }

    let foo = Foo();
    assert("Init should save the set variables", foo.message, "hello");
}

test_init();

// ========== test_class.dry ========== 
def test_object_types() {
    class Foo {}

    let foo = Foo();

    assert("Type of class", typeof(Foo), "class");
    assert("Type of instance", typeof(foo), "instance");
}

def test_instance_properties() {
    class Pet {
        def sound() {
            return "quack!";
        }
    }

    let duck = Pet();
    assert("Ducks should quack!", duck.sound(), "quack!");

    let denji = Pet();
    denji.sound = lambda() {
        return "Woof!";
    };
    assert("Denji should say 'Woof!'", denji.sound(), "Woof!");
}

def test_class_properties() {
    class Foo {}
    Foo.bar = "bar value";
    assert("Class properties should be updated", Foo.bar, "bar value");
}

test_object_types();
test_instance_properties();
test_class_properties();
